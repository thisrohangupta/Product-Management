pipeline:
  name: Charter
  identifier: Charter
  projectIdentifier: Rohan
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        type: Deployment
        spec:
          deploymentType: NativeHelm
          service:
            serviceRef: <+input>
            serviceInputs: <+input>
          environment:
            environmentRef: <+input>
            deployToAll: false
            environmentInputs: <+input>
            infrastructureDefinitions: <+input>
          execution:
            steps:
              - stepGroup:
                  name: Deploy Containers
                  identifier: Deploy_Containers
                  steps:
                    - step:
                        type: ShellScript
                        name: Set_PrePrimary_Value
                        identifier: Set_PrePrimary_Value
                        spec:
                          shell: Bash
                          onDelegate: true
                          source:
                            type: Inline
                            spec:
                              script: |-
                                PRIMARY_WEIGHT=""
                                CANARY_WEIGHT=""
                                CANARY_DEPLOY_MODE=""

                                env=`echo ${infra.name} | sed -e "s/-canary//g"`

                                enable_canary_deploy="false"

                                if [[  (${workflow.variables.ENABLE_CANARY_INT} == "true" &&  $env == 'int' ) || ( ${workflow.variables.ENABLE_CANARY_PERF} == "true" &&  $env == 'perf') || ( ${workflow.variables.ENABLE_CANARY_STAGE} == "true" &&  $env == 'stage') || ( ${workflow.variables.ENABLE_CANARY_PROD} == "true" &&  $env == 'prod')  ]]; then

                                     enable_canary_deploy="true"
                                fi

                                if [[ $enable_canary_deploy == "true" ]]; then
                                   export PRIMARY_WEIGHT="0"
                                   export CANARY_WEIGHT="100"
                                   export CANARY_DEPLOY_MODE="true"
                                else
                                   export PRIMARY_WEIGHT="100"
                                   export CANARY_WEIGHT="0"
                                   export CANARY_DEPLOY_MODE="false"
                                fi

                                #export PRIMARY_WEIGHT="100"
                                #export CANARY_WEIGHT="0"

                                echo "PRIMARY_WEIGHT Value"
                                echo ${PRIMARY_WEIGHT}

                                echo "CANARY_WEIGHT Value"
                                echo ${CANARY_WEIGHT}

                                echo "CANARY_DEPLOY_MODE Value"
                                echo ${CANARY_DEPLOY_MODE}

                                export INFRA_NAME=`echo ${infra.name} | sed -e "s/-canary//g"`

                                echo "INFRA NAME"
                                echo ${INFRA_NAME}
                          environmentVariables: []
                          outputVariables:
                            - name: CANARY_WEIGHT
                              type: String
                              value: CANARY_WEIGHT
                            - name: PRIMARY_WEIGHT
                              type: String
                              value: PRIMARY_WEIGHT
                            - name: INFRA_NAME
                              type: String
                              value: INFRA_NAME
                            - name: CANARY_DEPLOY_MODE
                              type: String
                              value: CANARY_DEPLOY_MODE
                        timeout: 10m
                    - step:
                        type: ShellScript
                        spec:
                          shell: Bash
                          onDelegate: true
                          source:
                            type: Inline
                            spec:
                              script: |-
                                if [  $env == 'int' ]; then
                                EWS_USER1=${secrets.getValue("win-ews-int-user")}
                                EWS_PWD1=${secrets.getValue("win-ews-int-password")}
                                echo ${EWS_USER1}
                                echo ${EWS_PWD1}
                                else 
                                if [  $env == 'perf' ]; then
                                EWS_USER1=${secrets.getValue("win-ews-perf-user")}
                                EWS_PWD1=${secrets.getValue("win-ews-perf-password")}
                                echo ${EWS_USER1}
                                echo ${EWS_PWD1}
                                elif  [  $env == 'stage' ]; then
                                EWS_USER1=${secrets.getValue("win-ews-stage-user")}
                                EWS_PWD=${secrets.getValue("win-ews-stage-password")}
                                echo ${EWS_USER1}
                                echo ${EWS_PWD1}

                                elif  [  $env == 'prod' ]; then 
                                EWS_USER1=${secrets.getValue("win-ews-prod-user")}
                                EWS_PWD1=${secrets.getValue("win-ews-prod-password")}
                                echo ${EWS_USER1}
                                echo ${EWS_PWD1}
                                fi 
                                fi 

                                export  EWS_USER=${EWS_USER1}
                                export  EWS_PWD=${EWS_PWD1}
                          environmentVariables: []
                          outputVariables:
                            - name: EWS_USER
                              type: Secret
                              value: EWS_USER
                            - name: EWS_PWD
                              type: Secret
                              value: EWS_PWD
                        timeout: 10m
                        when:
                          stageStatus: Success
                          condition: <+input>
                        name: Fetch EWS
                        identifier: Fetch_EWS
                    - step:
                        type: ShellScript
                        spec:
                          shell: Bash
                          onDelegate: true
                          source:
                            type: Inline
                            spec:
                              script: |-
                                VERSION=""
                                RELEASE_VERSION=""
                                gitURL=https://${secrets.getValue("scp-harness-gitlab-user")}:${secrets.getValue("scp-harness-gitlab-password")}@gitlab.se-charter.net/scp/${workflow.variables.SUB_GROUP}/${workflow.variables.PROJECT}/${workflow.variables.GIT_REPO}.git

                                if [ -z "${workflow.variables.CHART_VERSION}" ] && [ -z "${workflow.variables.GIT_BRANCH_NAME}" ]; then
                                   echo "Please specify either a chart version or branch name"
                                exit 1
                                fi  

                                if [ -z "${workflow.variables.CHART_VERSION}" ]; then
                                   branchExists=$(git ls-remote --heads $gitURL  | wc -l)
                                  if [ "${branchExists}" = "0" ]; then
                                    echo "Could not find branch ${workflow.variables.GIT_BRANCH_NAME} please specify a branch that exists"
                                    exit 1
                                  fi
                                  rm -rf ${workflow.variables.GIT_REPO}

                                  git clone --single-branch --branch ${workflow.variables.GIT_BRANCH_NAME} $gitURL

                                  apt-get install -y software-properties-common
                                  add-apt-repository -y ppa:rmescandon/yq
                                  apt-get install -y yq

                                  cd ${workflow.variables.GIT_REPO}
                                  
                                  # CHART_VERSION=$(yq r Chart.yaml version)
                                  #test=$(yq r Chart.yaml version)
                                  #VERSION=$(yq r Chart.yaml version)
                                  test=$(yq e '.version' Chart.yaml )
                                  VERSION=$(yq e '.version' Chart.yaml )
                                else
                                  VERSION=${workflow.variables.CHART_VERSION}
                                fi



                                if [ -z "$VERSION" ]; then
                                  echo "Did not find a chart version please review if this is the correct release branch ${workflow.variables.GIT_BRANCH_NAME} or specify chart version"
                                  exit 1
                                fi

                                export CHART_VERSION=${VERSION}
                                export RELEASE_VERSION=$(echo ${VERSION} | cut -f1,2 -d.)
                                echo "Chart Version"
                                echo ${VERSION}
                                echo "Release Version"
                                echo $RELEASE_VERSION
                          environmentVariables: []
                          outputVariables:
                            - name: CHART_VERSION
                              type: String
                              value: CHART_VERSION
                            - name: RELEASE_VERSION
                              type: String
                              value: RELEASE_VERSION
                        timeout: 10m
                        when:
                          stageStatus: Success
                          condition: <+input>
                        name: Publish Helm Chart
                        identifier: Publish_Helm_Chart
                    - step:
                        timeout: 10m
                        type: ShellScript
                        spec:
                          shell: Bash
                          onDelegate: true
                          source:
                            type: Inline
                            spec:
                              script: |
                                aname=` echo "${workflow.variables.GIT_REPO}" |   cut -d- -f1` 

                                nam=$aname

                                check=`helm list -n $nam | grep -i deployed | awk '{print $9}' |  cut -d- -f4 `
                                echo $check

                                echo ${workflow.variables.previous_chart_version}


                                if [[   $check == ${workflow.variables.previous_chart_version} ]]; then
                                    echo "version matched"
                                else
                                    echo "version Mismatched"
                                fi
                                podcount=`kubectl get pod -n $nam  |  grep -v -i name | grep -v -i completed | grep -v 2/2 | wc -l`

                                if [[ $podcount == "0" ]]; then
                                    echo "all pods are up and running"
                                fi
                          environmentVariables: []
                          outputVariables: []
                        when:
                          stageStatus: Success
                          condition: <+input>
                        name: Pre Valid
                        identifier: Pre_Valid
                    - step:
                        type: HarnessApproval
                        name: Pre Approval
                        identifier: Pre_Approval
                        spec:
                          approvalMessage: Please review the following information and approve the pipeline progression
                          includePipelineExecutionHistory: true
                          approvers:
                            userGroups:
                              - account._account_all_users
                            minimumCount: 1
                            disallowPipelineExecutor: false
                          approverInputs: []
                        timeout: 1d
                        when:
                          stageStatus: Success
                          condition: ( ${infra.name}=='perf' || ${infra.name}=='int')
                        failureStrategies: []
                    - step:
                        name: Helm Deployment
                        identifier: helmDeployment
                        type: HelmDeploy
                        timeout: 10m
                        spec:
                          skipDryRun: false
                    - step:
                        type: HarnessApproval
                        name: Approval for traffic change
                        identifier: Approval_for_traffic_change
                        spec:
                          approvalMessage: Please review the following information and approve the pipeline progression
                          includePipelineExecutionHistory: true
                          approvers:
                            userGroups:
                              - account._account_all_users
                            minimumCount: 1
                            disallowPipelineExecutor: false
                          approverInputs: []
                        timeout: 1d
                        when:
                          stageStatus: Success
                          condition: ( ${workflow.variables.ENABLE_CANARY_INT} == "false" && ${infra.name} == 'int' ) || ( ${workflow.variables.ENABLE_CANARY_PERF} == "false" && ${infra.name} == 'perf' ) || ( ${workflow.variables.ENABLE_CANARY_STAGE} == "false" && ${infra.name} == 'stage' ) || ( ${workflow.variables.ENABLE_CANARY_PROD} == "false" && ${infra.name} == 'prod' )
                        failureStrategies: []
                    - step:
                        type: ShellScript
                        name: Set_PostPrimary_Value
                        identifier: Set_PostPrimary_Value
                        spec:
                          shell: Bash
                          onDelegate: true
                          source:
                            type: Inline
                            spec:
                              script: |-
                                KOPS_CLUSTER_BASE=$(kubectl -n kube-system get configmap kops-controller -o jsonpath={.data.'config\.yaml'} | jq '.configBase')
                                if [[ $KOPS_CLUSTER_BASE != *"${workflow.variables.K8S_CLUSTER_ID}"* ]]; then
                                  echo "Not running in intended delegate of $CLUSTER_NAME"
                                  exit 1
                                fi


                                namespace=${workflow.variables.CANARY_NAMESPACE}

                                primaryweight=100
                                canaryweight=0


                                rm -rf canary-scripts

                                #git clone --single-branch --branch master 'https://${secrets.getValue("scp-harness-gitlab-user")}:${secrets.getValue("scp-harness-gitlab-password")}@gitlab.se-charter.net/scp/scpdevops/k8s-infrastructure/canary-scripts.git'

                                git clone --single-branch --branch master 'https://${secrets.getValue("xg_gitlab_username")}:${secrets.getValue("xg_gitlab_password")}@gitlab.spectrumflow.net/scp/scpdevops/canary-scripts.git'

                                cd canary-scripts

                                ./split_traffic.sh "$namespace" $primaryweight $canaryweight
                          environmentVariables: []
                          outputVariables: []
                        timeout: 10m
                        when:
                          stageStatus: Success
                          condition: ( ${workflow.variables.ENABLE_CANARY_INT} == "false" && ${infra.name} == 'int' ) || ( ${workflow.variables.ENABLE_CANARY_PERF} == "false" && ${infra.name} == 'perf' ) || ( ${workflow.variables.ENABLE_CANARY_STAGE} == "false" && ${infra.name} == 'stage' ) || ( ${workflow.variables.ENABLE_CANARY_PROD} == "false" && ${infra.name} == 'prod' )
                        failureStrategies: []
                    - step:
                        type: HarnessApproval
                        name: Delete Canary Approval
                        identifier: Delete_Canary_Approval
                        spec:
                          approvalMessage: Please review the following information and approve the pipeline progression
                          includePipelineExecutionHistory: true
                          approvers:
                            userGroups:
                              - account._account_all_users
                            minimumCount: 1
                            disallowPipelineExecutor: false
                          approverInputs: []
                        timeout: 1d
                        when:
                          stageStatus: Success
                          condition: ( ${workflow.variables.ENABLE_CANARY_INT} == "false" && ${infra.name} == 'int' ) || ( ${workflow.variables.ENABLE_CANARY_PERF} == "false" && ${infra.name} == 'perf' ) || ( ${workflow.variables.ENABLE_CANARY_STAGE} == "false" && ${infra.name} == 'stage' ) || ( ${workflow.variables.ENABLE_CANARY_PROD} == "false" && ${infra.name} == 'prod' )
                        failureStrategies: []
                    - step:
                        type: ShellScript
                        name: Delete Canary
                        identifier: Delete_Canary
                        spec:
                          shell: Bash
                          onDelegate: true
                          source:
                            type: Inline
                            spec:
                              script: |-
                                KOPS_CLUSTER_BASE=$(kubectl -n kube-system get configmap kops-controller -o jsonpath={.data.'config\.yaml'} | jq '.configBase')
                                if [[ $KOPS_CLUSTER_BASE != *"${workflow.variables.K8S_CLUSTER_ID}"* ]]; then
                                  echo "Not running in intended delegate of $CLUSTER_NAME"
                                  exit 1
                                fi


                                namespace=${workflow.variables.CANARY_NAMESPACE}

                                rm -rf canary-scripts



                                git clone --single-branch --branch master 'https://${secrets.getValue("xg_gitlab_username")}:${secrets.getValue("xg_gitlab_password")}@gitlab.spectrumflow.net/scp/scpdevops/canary-scripts.git'

                                cd canary-scripts

                                ./delete_canary_deploy.sh "$namespace" 
                          environmentVariables: []
                          outputVariables: []
                        timeout: 10m
                        when:
                          stageStatus: Success
                          condition: ( ${workflow.variables.ENABLE_CANARY_INT} == "false" && ${infra.name} == 'int' ) || ( ${workflow.variables.ENABLE_CANARY_PERF} == "false" && ${infra.name} == 'perf' ) || ( ${workflow.variables.ENABLE_CANARY_STAGE} == "false" && ${infra.name} == 'stage' ) || ( ${workflow.variables.ENABLE_CANARY_PROD} == "false" && ${infra.name} == 'prod' )
                        failureStrategies: []
                    - step:
                        type: ShellScript
                        spec:
                          shell: Bash
                          onDelegate: true
                          source:
                            type: Inline
                            spec:
                              script: "aname=` echo \"${workflow.variables.GIT_REPO}\" |   cut -d- -f1` \n\nnam=$aname\necho $nam \nvslist=$(kubectl get vs -n ${nam} | sed  '1d' | awk {'print $1'})\n\nfor vs in $vslist\ndo \n       echo ${vs}\n\n       canaryhostcount=$(kubectl get vs ${vs} -n ${nam} -o json | jq -r '.spec.http[].route[].destination.host'|grep -i -e \"-canary.\"| wc -l)\n       \n\n       if [[ $canaryhostcount -gt 0 ]]; then\n              echo \"$vs  is a Canary Virtual Service\"\n              #Make sure first hostname does not contain canary\n                hostcount=0\n                #totalcount=0\n              \trwcount=$(kubectl get vs ${vs} -n ${nam} -o json | jq '.spec.http' | jq length )\n                #echo $rwcount\n              \tfor (( rw=0; rw<$rwcount; rw++ ))\n\t\t\t\tdo\n\t\t\t\t         testhostname=$(kubectl get vs ${vs} -n ${nam} -o json | jq '.spec.http['$rw'].route['$rw'].destination.host')\n\t\t\t\t         echo $testhostname\n\t\t\t\t         if [[  \"$testhostname\" != *\"canary\"* ]]; then\n\t\t\t\t              weight=$(kubectl get vs ${vs} -n ${nam} -o json | jq '.spec.http['$rw'].route['$rw'].weight')\n\t\t\t\t                if [[ $weight == \"100\" ]]; then\n                                                    echo \"Primary weight matched\"\n                                                else\n                                                     echo \" Weight mismatched for this service ${vs}\"\n                                                     exit\n                                                 fi\n\t\t\t\t         fi\n\t\t\t\tdone\n\n       else\n       \t\techo \"******** $vs  is not a Canary enabled Virtual Service **********\"\n       fi\n\ndone\n\n\ncheck=`helm list -n $nam | grep -i deployed | awk '{print $9}' |  cut -d- -f4 `\necho $check\n\necho ${context.chart.CHART_VERSION} \n\n\n#if [[   $check == ${context.chart.CHART_VERSION}  ]]; then\n#    echo \"version matched\"\n#fi"
                          environmentVariables: []
                          outputVariables: []
                        timeout: 10m
                        when:
                          stageStatus: Success
                        name: Post Validate
                        identifier: Post_Validate
                    - step:
                        type: HarnessApproval
                        name: Post Approval
                        identifier: Post_Approval
                        spec:
                          approvalMessage: Please review the following information and approve the pipeline progression
                          includePipelineExecutionHistory: true
                          approvers:
                            userGroups:
                              - account._account_all_users
                            minimumCount: 1
                            disallowPipelineExecutor: false
                          approverInputs: []
                        timeout: 1d
                        when:
                          stageStatus: Success
                          condition: ( ${infra.name}=='perf' || ${infra.name}=='int')
                        failureStrategies: []
                    - step:
                        type: ShellScript
                        spec:
                          shell: Bash
                          onDelegate: true
                          source:
                            type: Inline
                            spec:
                              script: |-
                                #!/bin/bash
                                rm -rf utils
                                git clone --single-branch --branch master 'https://${secrets.getValue("xg_gitlab_username")}:${secrets.getValue("xg_gitlab_password")}@gitlab.spectrumflow.net/scp/scpdevops/cicd/utils.git'

                                cd utils/webex

                                trigger_message() {
                                  python3 post_message.py -a "${app.name}" -p "${app.defaults.DEPLOYMENT_PLAIN_TEXT}" -m "${app.defaults.DEPLOYMENT_MARKDOWN}" -w "${secrets.getValue("webexBotToken")}"
                                }

                                # variableint="${published_name_int.approvedBy.name}"
                                # variableperf="${published_name_perf.approvedBy.name}"
                                # variablestage="${published_name_stage.approvedBy.name}"
                                # variableprod="${published_name_prod.approvedBy.name}"


                                env_int="${published_name_int.approvedBy.name}"
                                env_perf="${published_name_perf.approvedBy.name}"
                                env_stage="${published_name_stage.approvedBy.name}"
                                env_prod="${published_name_prod.approvedBy.name}"


                                if [ -n "${env_int}" ] && [ "${context.canary.INFRA_NAME}" == "int" ]; then
                                  python3 post_message.py -a "${app.name}" -p "${app.defaults.DEPLOYMENT_PLAIN_TEXT}" -m "${app.defaults.DEPLOYMENT_MARKDOWN_INT}" -w "${secrets.getValue("webexBotToken")}"
                                  elif [ -n "${env_perf}" ] && [ "${context.canary.INFRA_NAME}" == "perf" ]; then
                                      python3 post_message.py -a "${app.name}" -p "${app.defaults.DEPLOYMENT_PLAIN_TEXT}" -m "${app.defaults.DEPLOYMENT_MARKDOWN_PERF}" -w "${secrets.getValue("webexBotToken")}"
                                  elif [ -n "${env_stage}" ] && [ "${context.canary.INFRA_NAME}" == "stage" ]; then
                                      python3 post_message.py -a "${app.name}" -p "${app.defaults.DEPLOYMENT_PLAIN_TEXT}" -m "${app.defaults.DEPLOYMENT_MARKDOWN_STAGE}" -w "${secrets.getValue("webexBotToken")}"
                                  elif [ -n "${env_prod}" ] && [ "${context.canary.INFRA_NAME}" == "prod" ]; then
                                      python3 post_message.py -a "${app.name}" -p "${app.defaults.DEPLOYMENT_PLAIN_TEXT}" -m "${app.defaults.DEPLOYMENT_MARKDOWN_PROD}" -w "${secrets.getValue("webexBotToken")}"
                                else
                                  if [[ -z "${published_name_int}" ]]; then
                                    echo "*****************"
                                    trigger_message
                                    echo "*****************"

                                  elif [[ -z "${published_name_perf}" ]]; then
                                    echo "*****************"
                                    trigger_message
                                    echo "*****************"
                                  elif [[ -z "${published_name_stage}" ]]; then
                                    echo "*****************"
                                    trigger_message
                                    echo "*****************"
                                  elif [[ -z "${published_name_prod}" ]]; then
                                    echo "*****************"
                                    trigger_message
                                    echo "*****************"
                                 fi
                                fi
                          environmentVariables: []
                          outputVariables: []
                        timeout: 10m
                        name: Notify Deploy
                        identifier: Notify_Deploy
                    - step:
                        type: ShellScript
                        name: Trigger TechMobile Testing
                        identifier: Trigger_TechMobile_Testing
                        spec:
                          shell: Bash
                          onDelegate: true
                          source:
                            type: Inline
                            spec:
                              script: |-
                                rm -rf win-testing

                                git clone https://${secrets.getValue("scp-harness-gitlab-user")}:${secrets.getValue("scp-harness-gitlab-password")}@gitlab.se-charter.net/scpautomation/win-testing.git

                                declare -A accounts=(
                                  ["int"]=${secrets.getValue("win_account_int")} 
                                  ["perf"]=${secrets.getValue("win_account_perf")}
                                  ["prod"]=${secrets.getValue("win_account_prod")}
                                )

                                declare -A usernames=(
                                  ["int"]=${secrets.getValue("techmobile_user")}
                                  ["perf"]=${secrets.getValue("techmobile_user_perf")}
                                  ["prod"]=${secrets.getValue("techmobile_user_prod")}
                                )

                                declare -A passwords=(
                                  ["int"]=${secrets.getValue("techmobile_password")} 
                                  ["perf"]=${secrets.getValue("techmobile_password_perf")}
                                  ["prod"]=${secrets.getValue("techmobile_password_prod")}
                                )

                                cd win-testing

                                pip3 install selenium
                                pip3 install requests

                                xvfb-run python3 win_techmobile.py --env ${infra.name} \
                                --tech_mobile_creds ${usernames["${infra.name}"]} ${passwords["${infra.name}"]} \
                                --win_server_account ${accounts["${infra.name}"]}
                          environmentVariables: []
                          outputVariables: []
                        timeout: 10m
                        when:
                          stageStatus: Success
                          condition: "\"true\" == \"true\""
                        failureStrategies: []
                    - step:
                        type: ShellScript
                        name: Trigger Performance Testing
                        identifier: Trigger_Performance_Testing
                        spec:
                          shell: Bash
                          onDelegate: true
                          source:
                            type: Inline
                            spec:
                              script: |-
                                API_TOKEN=${secrets.getValue("jenkins_jmeter_api")}
                                JENKINS_USERNAME=${secrets.getValue("jenkins_jmeter_username")}

                                AWS_KEY=${secrets.getValue("scpFirmwareBatchUpgradeHarnessUser_key")}
                                AWS_SECRET=${secrets.getValue("scpFirmwareBatchUpgradeHarnessUser_secret")}

                                #rm -rf shared-components

                                #git clone --single-branch --branch master 'https://harness_user:${secrets.getValue("git_harness_user_password")}@stash.dev-charter.net/stash/scm/pip/shared-components.git'

                                #cd shared-components/jmeter

                                rm -rf utils

                                git clone --single-branch --branch master 'https://${secrets.getValue("scp-harness-gitlab-user")}:${secrets.getValue("scp-harness-gitlab-password")}@gitlab.se-charter.net/scpautomation/cicd/utils.git'

                                cd utils/jmeter

                                pip3 install -r requirements.txt

                                component=""

                                #if [ "${service.name}" = "win-ui" ];then
                                #  component="ui"
                                #else
                                #  component="server"
                                #fi

                                component="ui"

                                STATUS="$(python3 jmeter.py -k "${AWS_KEY}" \
                                -s "${AWS_SECRET}" \
                                -r "${workflow.variables.AWS_ROLE}" \
                                -n "win" \
                                -c "${component}" \
                                -e "${infra.name}" \
                                -u "${JENKINS_USERNAME}" \
                                -a "${API_TOKEN}")"

                                echo $STATUS

                                sleep 10s 
                                #component="server"

                                #STATUS="$(python3 jmeter.py -k "${AWS_KEY}" \
                                #-s "${AWS_SECRET}" \
                                #-r "${workflow.variables.AWS_ROLE}" \
                                #-n "win" \
                                #-c "${component}" \
                                #-e "${infra.name}" \
                                #-u "${JENKINS_USERNAME}" \
                                #-a "${API_TOKEN}")"

                                #echo $STATUS
                          environmentVariables: []
                          outputVariables: []
                        timeout: 10m
                        when:
                          stageStatus: Success
                          condition: <+env.name> == "prod"
                        failureStrategies: []
                    - step:
                        type: ShellScript
                        name: Trigger Robot Tests
                        identifier: Trigger_Robot_Tests
                        spec:
                          shell: Bash
                          onDelegate: true
                          source:
                            type: Inline
                            spec:
                              script: |-
                                pip3 install requests
                                pip3 install redis

                                python3 -c '

                                import requests
                                import json
                                import redis

                                conn = redis.Redis(host="scp-robot-automation.i9tdcv.ng.0001.use1.cache.amazonaws.com", port=6379, db=0, decode_responses=True) 

                                conn.set("deployments:${service.name}:${infra.name}:version", "${context.chart.CHART_VERSION}")
                                tags = conn.smembers("tags:win")

                                url = "https://app.harness.io/gateway/api/webhooks/Sg2917dEy2T9WSqJjfRkD3v2MNkfpBx9VbR528jE?accountId=vQWExnj-Sy2pmVJ8zr1MnQ"

                                data = {
                                       "application": "skQiHPfjS067eEVNmLu1-A",
                                       "parameters": {
                                                     "ROBOT_TAGS": " ".join(tags),
                                                     "ROBOT_TEST_FILE": "winui",
                                                     "EMAILS": "DL-SCP-INT-TEST@charter.com DL-SCP-AUTOMATION@charter.com zach.smialek@charter.com jeffrey.swanson@charter.com",
                                                     "FAILURE_PERCENTAGE": "20",
                                                     "ENV": "${infra.name}",
                                                     "ROUTER_MODEL": None
                                                     }
                                       }

                                headers = { "Content-Type": "application/json"}
                                r = requests.request(method="POST", url=url, data=json.dumps(data), headers=headers)

                                if not r.ok:
                                    print("something went wrong starting scl tests", r.text, r.status_code)
                                '
                          environmentVariables: []
                          outputVariables: []
                        timeout: 10m
                        when:
                          stageStatus: Success
                          condition: "\"true\" == \"true\""
                        failureStrategies: []
              - stepGroup:
                  name: Wrap Up
                  identifier: Wrap_Up
                  steps:
                    - step:
                        type: HarnessApproval
                        name: Approved for INT
                        identifier: Approved_for_INT
                        spec:
                          approvalMessage: Approved for INT
                          includePipelineExecutionHistory: true
                          approvers:
                            userGroups:
                              - account._account_all_users
                            minimumCount: 1
                            disallowPipelineExecutor: false
                          approverInputs: []
                        timeout: 1d
                        when:
                          stageStatus: Success
                          condition: ${infra.name} != "int"
                        failureStrategies: []
                    - step:
                        type: HarnessApproval
                        name: Approval for perf
                        identifier: Approval_for_perf
                        spec:
                          approvalMessage: Please review the following information and approve the pipeline progression
                          includePipelineExecutionHistory: true
                          approvers:
                            userGroups:
                              - account._account_all_users
                            minimumCount: 1
                            disallowPipelineExecutor: false
                          approverInputs: []
                        timeout: 1d
                        when:
                          stageStatus: Success
                          condition: ${infra.name} != "perf"
                        failureStrategies: []
                    - step:
                        type: HarnessApproval
                        name: Approval for Stage or Prod
                        identifier: Approval_for_Stage_or_Prod
                        spec:
                          approvalMessage: Please review the following information and approve the pipeline progression
                          includePipelineExecutionHistory: true
                          approvers:
                            userGroups:
                              - account._account_all_users
                            minimumCount: 1
                            disallowPipelineExecutor: false
                          approverInputs: []
                        timeout: 1d
                        when:
                          stageStatus: Success
                          condition: ${env.name} != "prod"
                        failureStrategies: []
            rollbackSteps:
              - step:
                  name: Helm Rollback
                  identifier: helmRollback
                  type: HelmRollback
                  timeout: 10m
                  spec: {}
              - step:
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |-

                          #!/bin/bash
                          rm -rf utils
                          git clone --single-branch --branch master 'https://${secrets.getValue("xg_gitlab_username")}:${secrets.getValue("xg_gitlab_password")}@gitlab.spectrumflow.net/scp/scpdevops/cicd/utils.git'

                          cd utils/webex

                          trigger_message() {
                            python3 post_message.py -a "${app.name}" -p "${app.defaults.DEPLOYMENT_PLAIN_TEXT}" -m "${app.defaults.DEPLOYMENT_MARKDOWN_ROLLBACK}" -w "${secrets.getValue("webexBotToken")}"
                          }


                          env_int="${published_name_int.approvedBy.name}"
                          env_perf="${published_name_perf.approvedBy.name}"
                          env_stage="${published_name_stage.approvedBy.name}"
                          env_prod="${published_name_prod.approvedBy.name}"

                                                                                  
                          if [ -n "${env_int}" ] && [ "${context.canary.INFRA_NAME}" == "integration" ]; then
                            python3 post_message.py -a "${app.name}" -p "${app.defaults.DEPLOYMENT_PLAIN_TEXT}" -m "${app.defaults.DEPLOYMENT_MARKDOWN_INT_ROLLBACK}" -w "${secrets.getValue("webexBotToken")}"
                            elif [ -n "${env_perf}" ] && [ "${context.canary.INFRA_NAME}" == "perf" ]; then
                                python3 post_message.py -a "${app.name}" -p "${app.defaults.DEPLOYMENT_PLAIN_TEXT}" -m "${app.defaults.DEPLOYMENT_MARKDOWN_PERF_ROLLBACK}" -w "${secrets.getValue("webexBotToken")}"
                            elif [ -n "${env_stage}" ] && [ "${context.canary.INFRA_NAME}" == "stage" ]; then
                                python3 post_message.py -a "${app.name}" -p "${app.defaults.DEPLOYMENT_PLAIN_TEXT}" -m "${app.defaults.DEPLOYMENT_MARKDOWN_STAGE_ROLLBACK}" -w "${secrets.getValue("webexBotToken")}"
                            elif [ -n "${env_prod}" ] && [ "${context.canary.INFRA_NAME}" == "prod" ]; then
                                python3 post_message.py -a "${app.name}" -p "${app.defaults.DEPLOYMENT_PLAIN_TEXT}" -m "${app.defaults.DEPLOYMENT_MARKDOWN_PROD_ROLLBACK}" -w "${secrets.getValue("webexBotToken")}"
                          else
                            if [[ -z "${published_name_int}" ]]; then
                              echo "*****************"
                              trigger_message
                              echo "*****************"

                            elif [[ -z "${published_name_perf}" ]]; then
                              echo "*****************"
                              trigger_message
                              echo "*****************"
                            elif [[ -z "${published_name_stage}" ]]; then
                              echo "*****************"
                              trigger_message
                              echo "*****************"
                            elif [[ -z "${published_name_prod}" ]]; then
                              echo "*****************"
                              trigger_message
                              echo "*****************"
                           fi
                          fi
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
                  name: Notify Rollback
                  identifier: Notify_Rollback
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        variables:
          - name: CHART_VERSION
            type: String
            description: ""
            value: <+input>
          - name: DEPLOYMENT_NOTIFICATION_EMAILS
            type: String
            description: ""
            value: <+input>
          - name: PROJECT
            type: String
            description: ""
            value: win
          - name: GIT_BRANCH_NAME
            type: String
            description: ""
            value: <+input>
          - name: ENV
            type: String
            description: ""
            value: <+input>
          - name: RELEASE_VERSION
            type: String
            description: ""
            value: arn:aws:iam::750300312428:role/scpFirmwareBatchUpgradeHarness
          - name: AWS_ROLE
            type: String
            description: ""
            value: <+input>
          - name: CANARY_NAMESPACE
            type: String
            description: ""
            value: <+input>
          - name: ENABLE_CANARY_INT
            type: String
            description: ""
            value: <+input>
          - name: ENABLE_CANARY_PERF
            type: String
            description: ""
            value: <+input>
          - name: ENABLE_CANARY_STAGE
            type: String
            description: ""
            value: <+input>
          - name: ENABLE_CANARY_PROD
            type: String
            description: ""
            value: <+input>
          - name: CLUSTER_TAG
            type: String
            description: ""
            value: <+input>
          - name: K8S_CLUSTER_ID
            type: String
            description: ""
            value: <+input>
          - name: GIT_REPO
            type: String
            description: ""
            value: win-helm-chart
          - name: SUB_GROUP
            type: String
            description: ""
            value: scp-services
          - name: REPOSITORY_NAME
            type: String
            description: ""
            value: win-helm-chart
          - name: previous_chart_version
            type: String
            description: ""
            value: <+input>
        name: Deploy
        identifier: Deploy
        tags: {}
